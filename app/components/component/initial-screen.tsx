/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/U4MOeyumnOf
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Work_Sans } from 'next/font/google'
import { Rubik } from 'next/font/google'

work_sans({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import Link from "next/link"
import { Input } from "@/components/ui/input"

export function InitialScreen() {
  const [topics, setTopics] = useState([
    {
      id: 1,
      name: "JavaScript",
      description: "Learn the fundamentals of JavaScript",
    },
    {
      id: 2,
      name: "React",
      description: "Dive into the React library for building user interfaces",
    },
    {
      id: 3,
      name: "Python",
      description: "Explore the versatile Python programming language",
    },
    {
      id: 4,
      name: "Data Structures",
      description: "Understand the core data structures in computer science",
    },
    {
      id: 5,
      name: "Algorithms",
      description: "Learn about efficient algorithms and problem-solving techniques",
    },
    {
      id: 6,
      name: "Web Development",
      description: "Build dynamic and responsive web applications",
    },
  ])
  const [currentTopic, setCurrentTopic] = useState(null)
  const [questions, setQuestions] = useState([])
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState(null)
  const [searchTerm, setSearchTerm] = useState("")
  const handleTopicClick = (topic) => {
    setCurrentTopic(topic)
    fetch("YOUR_API_URL")
      .then((response) => response.json())
      .then((data) => setQuestions(data))
  }
  const handleAnswerClick = (answer) => {
    setSelectedAnswer(answer)
  }
  const handleNextQuestion = () => {
    setSelectedAnswer(null)
    setCurrentQuestion(currentQuestion + 1)
  }
  const filteredTopics = topics.filter((topic) => topic.name.toLowerCase().includes(searchTerm.toLowerCase()))
  return (
    <div className="flex flex-col min-h-screen bg-background text-foreground">
      <header className="bg-primary text-primary-foreground py-4 px-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">Quiz Site</h1>
        <Link href="#" className="text-primary-foreground hover:text-primary/90" prefetch={false}>
          <GithubIcon className="h-6 w-6" />
          <span className="sr-only">GitHub</span>
        </Link>
      </header>
      <div className="px-6 py-4">
        <div className="relative flex-1">
          <div className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search topics..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full rounded-lg bg-background pl-8"
          />
        </div>
      </div>
      {!currentTopic ? (
        <main className="flex-1 p-6">
          <h2 className="text-xl font-bold mb-4">Choose a Topic</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {filteredTopics.map((topic) => (
              <Link
                key={topic.id}
                href="#"
                onClick={() => handleTopicClick(topic)}
                className="bg-card text-card-foreground rounded-lg shadow-md hover:shadow-lg transition-shadow"
                prefetch={false}
              >
                <div className="p-4 flex items-center gap-2">
                  <div className="bg-primary text-primary-foreground px-2 py-1 rounded-md text-sm font-medium">
                    {topic.name}
                  </div>
                  <p className="text-sm text-muted-foreground">{topic.description}</p>
                </div>
              </Link>
            ))}
          </div>
        </main>
      ) : (
        <main className="flex-1 p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold">{currentTopic.name}</h2>
            <Link
              href="#"
              onClick={() => setCurrentTopic(null)}
              className="text-muted-foreground hover:text-foreground"
              prefetch={false}
            >
              Back to Topics
            </Link>
          </div>
          {currentQuestion < questions.length ? (
            <div className="bg-card text-card-foreground rounded-lg shadow-md p-6">
              <h3 className="text-lg font-bold mb-4">{questions[currentQuestion].question}</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {questions[currentQuestion].answers.map((answer) => (
                  <button
                    key={answer.id}
                    onClick={() => handleAnswerClick(answer)}
                    className={`bg-background text-foreground rounded-lg py-2 px-4 hover:bg-accent hover:text-accent-foreground transition-colors ${
                      selectedAnswer === answer ? "bg-accent text-accent-foreground" : ""
                    }`}
                  >
                    {answer.text}
                  </button>
                ))}
              </div>
              {selectedAnswer && (
                <div className="mt-4">
                  <button
                    onClick={handleNextQuestion}
                    className="bg-primary text-primary-foreground rounded-lg py-2 px-4 hover:bg-primary/90 transition-colors"
                  >
                    Next Question
                  </button>
                </div>
              )}
            </div>
          ) : (
            <div className="bg-card text-card-foreground rounded-lg shadow-md p-6">
              <h3 className="text-lg font-bold mb-4">Congratulations!</h3>
              <p className="text-muted-foreground">You have completed the quiz for {currentTopic.name}.</p>
            </div>
          )}
        </main>
      )}
      <footer className="bg-muted text-muted-foreground py-4 px-6 text-sm">
        <p>&copy; 2023 Quiz Site. All rights reserved.</p>
      </footer>
    </div>
  )
}

function GithubIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4" />
      <path d="M9 18c-4.51 2-5-2-7-2" />
    </svg>
  )
}
